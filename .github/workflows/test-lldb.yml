name: Test LLDB Server

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build-lldb:
    uses: ./.github/workflows/build-lldb.yml

  test-lldb-android:
    needs: [ build-lldb ]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            api-level: 28

    name: Android ${{ matrix.arch}} test

    steps:
      - uses: andrurogerz/action-spacemaker@main

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: llvm-${{ runner.os }}-${{ runner.arch }}
          path: ${{ github.workspace }}/BinaryCache
      - name: untar llvm artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/llvm.tar
          rm -f ${{ github.workspace }}/BinaryCache/llvm.tar

      - uses: actions/download-artifact@v4
        with:
          name: llvm-android-${{ matrix.arch }}
          path: ${{ github.workspace }}/BinaryCache
      - name: untar llvm Android artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/llvm-android.tar
          rm -f github.workspace }}/BinaryCache/llvm-android.tar

      - name: Checkout llvm project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ inputs.llvm_ref }}
          path: ${{ github.workspace }}/SourceCache/llvm

      # Cache the contents of $HOME/.android which contains emulators,
      # snapshots, and adb state.
      - name: Setup AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: ~/.android/**
          key: avd-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.api-level }}

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          disk-size: 4G
          force-avd-creation: false
          emulator-options: -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run lldb tests against lldb-server on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          # NOTE: -no-snapshot will not load or save state and the emulator will
          # cold boot. Ideally, we would specify -no-snapshot-save instead so it
          # would load the snapshot created in the caching step (but not save a
          # new one). However, doing that causes the emulator to hang during
          # shutdown. We're still saving time by reusing the device created in
          # the caching step and not wiping userdata on boot.
          emulator-options: -no-snapshot -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: >
            $ANDROID_SDK_ROOT/platform-tools/adb forward tcp:5432 tcp:5432

            $ANDROID_SDK_ROOT/platform-tools/adb push "${{ github.workspace }}/BinaryCache/llvm-android/bin/lldb-server" /data/local/tmp

            $ANDROID_SDK_ROOT/platform-tools/adb shell "chmod +x /data/local/tmp/lldb-server"

            $ANDROID_SDK_ROOT/platform-tools/adb shell "/data/local/tmp/lldb-server platform --server --listen localhost:5432" &

            ${{ github.workspace }}/BinaryCache/llvm/bin/lldb-dotest
            --out-of-tree-debugserver
            --arch ${{ matrix.arch }}
            --platform-name remote-android
            --platform-url connect://localhost:5432
            --platform-working-dir /data/local/tmp
            --compiler=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch }}-linux-android${{ matrix.api-level }}-clang
            --excluded=${{ github.workspace }}/Excluded/android-${{ matrix.arch }}.excluded

